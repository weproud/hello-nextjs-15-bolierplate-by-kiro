name: Performance Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Îß§Ïùº Ïò§Ï†Ñ 9ÏãúÏóê Ïã§Ìñâ (UTC)
    - cron: "0 9 * * *"

jobs:
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Run bundle analysis
        run: node scripts/analyze-bundle.js
        continue-on-error: true

      - name: Upload bundle analysis report
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-report
          path: reports/bundle-analysis-latest.json
          retention-days: 30

      - name: Comment PR with bundle analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const reportPath = path.join(process.cwd(), 'reports', 'bundle-analysis-latest.json');
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const formatBytes = (bytes) => {
                if (bytes === 0) return '0 B';
                const k = 1024;
                const sizes = ['B', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
              };
              
              let comment = '## üìä Bundle Analysis Report\n\n';
              
              // Metrics
              comment += '### üìà Metrics\n';
              comment += `- **Total JavaScript**: ${formatBytes(report.metrics.totalJavaScript)}\n`;
              comment += `- **Total CSS**: ${formatBytes(report.metrics.totalCSS)}\n`;
              comment += `- **Chunk Count**: ${report.metrics.chunkCount}\n`;
              comment += `- **Page Count**: ${report.metrics.pageCount}\n\n`;
              
              // Status
              if (report.passed) {
                comment += '### ‚úÖ Status: PASSED\n\n';
              } else {
                comment += '### ‚ùå Status: FAILED\n\n';
                
                if (report.violations.length > 0) {
                  comment += '### üö® Violations\n';
                  report.violations.forEach((violation, index) => {
                    comment += `${index + 1}. **${violation.type.toUpperCase()}**\n`;
                    if (violation.chunk) {
                      comment += `   - Chunk: ${violation.chunk}\n`;
                      comment += `   - Size: ${formatBytes(violation.size)} (limit: ${formatBytes(violation.limit)})\n`;
                      comment += `   - Excess: ${formatBytes(violation.excess)}\n`;
                    }
                  });
                  comment += '\n';
                }
              }
              
              // Recommendations
              if (report.recommendations.length > 0) {
                comment += '### üí° Recommendations\n';
                report.recommendations.forEach((rec, index) => {
                  comment += `${index + 1}. **${rec.title}**\n`;
                  comment += `   ${rec.description}\n`;
                  rec.actions.forEach(action => {
                    comment += `   - ${action}\n`;
                  });
                });
              }
              
              // Post comment
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Failed to post bundle analysis comment:', error);
            }

  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Wait for application to start
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: ".lighthouserc.json"
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30

  performance-regression-test:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build current branch
        run: npm run build
        env:
          NODE_ENV: production

      - name: Analyze current bundle
        run: node scripts/analyze-bundle.js
        continue-on-error: true

      - name: Save current report
        run: cp reports/bundle-analysis-latest.json reports/current-bundle.json

      - name: Checkout base branch
        run: git checkout ${{ github.base_ref }}

      - name: Install base dependencies
        run: npm ci

      - name: Build base branch
        run: npm run build
        env:
          NODE_ENV: production

      - name: Analyze base bundle
        run: node scripts/analyze-bundle.js
        continue-on-error: true

      - name: Save base report
        run: cp reports/bundle-analysis-latest.json reports/base-bundle.json

      - name: Compare bundle sizes
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const currentReport = JSON.parse(fs.readFileSync('reports/current-bundle.json', 'utf8'));
              const baseReport = JSON.parse(fs.readFileSync('reports/base-bundle.json', 'utf8'));
              
              const formatBytes = (bytes) => {
                if (bytes === 0) return '0 B';
                const k = 1024;
                const sizes = ['B', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
              };
              
              const formatDiff = (current, base) => {
                const diff = current - base;
                const percent = base > 0 ? ((diff / base) * 100).toFixed(1) : '0';
                const sign = diff > 0 ? '+' : '';
                return `${sign}${formatBytes(diff)} (${sign}${percent}%)`;
              };
              
              let comment = '## üìä Bundle Size Comparison\n\n';
              comment += '| Metric | Base | Current | Difference |\n';
              comment += '|--------|------|---------|------------|\n';
              
              const metrics = [
                ['Total JavaScript', 'totalJavaScript'],
                ['Total CSS', 'totalCSS'],
                ['Chunk Count', 'chunkCount'],
              ];
              
              metrics.forEach(([label, key]) => {
                const currentValue = currentReport.metrics[key] || 0;
                const baseValue = baseReport.metrics[key] || 0;
                
                if (key === 'chunkCount') {
                  const diff = currentValue - baseValue;
                  const sign = diff > 0 ? '+' : '';
                  comment += `| ${label} | ${baseValue} | ${currentValue} | ${sign}${diff} |\n`;
                } else {
                  comment += `| ${label} | ${formatBytes(baseValue)} | ${formatBytes(currentValue)} | ${formatDiff(currentValue, baseValue)} |\n`;
                }
              });
              
              // Check for significant regressions
              const jsRegression = currentReport.metrics.totalJavaScript - baseReport.metrics.totalJavaScript;
              const cssRegression = currentReport.metrics.totalCSS - baseReport.metrics.totalCSS;
              
              if (jsRegression > 50000 || cssRegression > 10000) {
                comment += '\n‚ö†Ô∏è **Warning**: Significant bundle size increase detected!\n';
              }
              
              if (jsRegression < -10000 || cssRegression < -5000) {
                comment += '\nüéâ **Great**: Bundle size decreased!\n';
              }
              
              // Post comment
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Failed to compare bundle sizes:', error);
            }
